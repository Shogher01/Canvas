{"ast":null,"code":"var _jsxFileName = \"/Users/syuzialeksanyan/Desktop/CS_PROJECTS/Java projects/CanvasDrawing/my-drawing-app/client/src/DrawingCanvas.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DrawingCanvas = () => {\n  _s();\n  const canvasRef = useRef();\n  const [drawMode, setDrawMode] = useState(false);\n  const [drawRectMode, setDrawRectMode] = useState(false);\n  const [isDrawing, setIsDrawing] = useState(false);\n  const [isDrawingRect, setIsDrawingRect] = useState(false);\n  const [startRectCoords, setStartRectCoords] = useState({\n    x: 0,\n    y: 0\n  });\n  const [drawnObjects, setDrawnObjects] = useState([]);\n  const deleteRectangle = id => {\n    setDrawnObjects(prevObjects => {\n      // Find the rectangle with the specified ID\n      const deletedRectangle = prevObjects.find(object => object.id === id);\n      if (deletedRectangle) {\n        // Clear the specific rectangle from the canvas\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.clearRect(deletedRectangle.x1, deletedRectangle.y1, deletedRectangle.x2 - deletedRectangle.x1, deletedRectangle.y2 - deletedRectangle.y1);\n      }\n\n      // Filter out the rectangle with the specified ID from drawnObjects\n      const updatedObjects = prevObjects.filter(object => object.id !== id);\n      return updatedObjects;\n    });\n  };\n  const toggleDrawMode = () => {\n    setDrawMode(!drawMode);\n    setDrawRectMode(false);\n    setIsDrawingRect(false);\n  };\n  const toggleDrawRectMode = () => {\n    setDrawRectMode(!drawRectMode);\n    setDrawMode(false);\n    setIsDrawingRect(true);\n  };\n  const startDrawing = e => {\n    if (!drawMode && !drawRectMode) return;\n    setIsDrawing(true);\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    ctx.beginPath();\n    ctx.moveTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n    if (drawRectMode) {\n      setStartRectCoords({\n        x: e.clientX - canvas.offsetLeft,\n        y: e.clientY - canvas.offsetTop\n      });\n    }\n  };\n  const draw = e => {\n    if (!drawMode && !drawRectMode || !isDrawing) return;\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    if (drawRectMode) {\n      drawRectangle(startRectCoords.x, startRectCoords.y, e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop, ctx, canvas);\n      return;\n    } else {\n      ctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n      ctx.stroke();\n    }\n\n    // Add the drawn line to the array of drawnObjects\n    setDrawnObjects([...drawnObjects, {\n      type: 'line',\n      // Indicate that it's a freehand line\n      x1: startRectCoords.x,\n      y1: startRectCoords.y,\n      x2: e.clientX - canvas.offsetLeft,\n      y2: e.clientY - canvas.offsetTop,\n      width: ctx.lineWidth,\n      // Include the width of the line\n      color: ctx.strokeStyle // Include the color of the line\n    }]);\n  };\n  const stopDrawing = () => {\n    setIsDrawing(false);\n  };\n  const drawRectangle = (x1, y1, x2, y2, ctx, canvas) => {\n    // Delete existing rectangles with the same starting point\n    //        const rectanglesToDelete = drawnObjects.filter(\n    //            (object) => object.type === 'rectangle' && object.x1 === x1 && object.y1 === y1\n    //        );\n\n    //        rectanglesToDelete.forEach((rectangle) => {\n    //            deleteRectangle(rectangle.id);\n    //        });\n\n    // Draw the new rectangle\n    ctx.beginPath();\n    ctx.strokeRect(x1, y1, x2 - x1, y2 - y1);\n    //ctx.stroke();\n\n    // Add the drawn rectangle to the array of drawnObjects\n    const filteredObjects = drawnObjects.filter(object => {\n      if (object.type === 'rectangle' && (object.x1 === x1 && object.y1 === y1 || object.x2 === x1 && object.y2 === y1 || object.x1 === x2 && object.y1 === y2 || object.x2 === x2 && object.y2 === y2)) {\n        //ctx.clearRect(object.x1, object.y1, object.x2 - object.x1, object.y2 - object.y1);\n\n        return false; // Exclude rectangles with the same starting point\n      }\n      return true;\n    });\n\n    // Add the drawn rectangle to the array of drawnObjects\n    setDrawnObjects([...filteredObjects, {\n      type: 'rectangle',\n      x1,\n      y1,\n      x2,\n      y2\n    }]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'black'\n      },\n      children: \"Simple Drawing Canvas\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tool\",\n      onClick: toggleDrawMode,\n      style: {\n        cursor: 'pointer',\n        userSelect: 'none',\n        display: 'inline-block',\n        marginRight: '10px',\n        fontSize: '24px',\n        background: drawMode ? 'DarkTurquoise' : 'transparent'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'black'\n        },\n        children: \"\\u270E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"tool\",\n      onClick: toggleDrawRectMode,\n      style: {\n        cursor: 'pointer',\n        userSelect: 'none',\n        display: 'inline-block',\n        marginRight: '10px',\n        fontSize: '24px',\n        background: drawRectMode ? 'DarkTurquoise' : 'transparent'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          color: 'black'\n        },\n        children: \"\\u25FB\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n      id: \"myCanvas\",\n      ref: canvasRef,\n      width: \"1000\",\n      height: \"500\",\n      style: {\n        border: '1px solid #000',\n        cursor: 'crosshair'\n      },\n      onMouseDown: startDrawing,\n      onMouseMove: draw,\n      onMouseUp: stopDrawing,\n      onMouseLeave: stopDrawing\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Drawn Objects:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: drawnObjects.map((object, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: JSON.stringify(object)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 187,\n          columnNumber: 25\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 141,\n    columnNumber: 9\n  }, this);\n};\n_s(DrawingCanvas, \"GFuSIBrmuzBGuJoJYWUFmQqLA8I=\");\n_c = DrawingCanvas;\nexport default DrawingCanvas;\nvar _c;\n$RefreshReg$(_c, \"DrawingCanvas\");","map":{"version":3,"names":["React","useRef","useState","jsxDEV","_jsxDEV","DrawingCanvas","_s","canvasRef","drawMode","setDrawMode","drawRectMode","setDrawRectMode","isDrawing","setIsDrawing","isDrawingRect","setIsDrawingRect","startRectCoords","setStartRectCoords","x","y","drawnObjects","setDrawnObjects","deleteRectangle","id","prevObjects","deletedRectangle","find","object","canvas","current","ctx","getContext","clearRect","x1","y1","x2","y2","updatedObjects","filter","toggleDrawMode","toggleDrawRectMode","startDrawing","e","beginPath","moveTo","clientX","offsetLeft","clientY","offsetTop","draw","drawRectangle","lineTo","stroke","type","width","lineWidth","color","strokeStyle","stopDrawing","strokeRect","filteredObjects","children","style","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","cursor","userSelect","display","marginRight","fontSize","background","ref","height","border","onMouseDown","onMouseMove","onMouseUp","onMouseLeave","map","index","JSON","stringify","_c","$RefreshReg$"],"sources":["/Users/syuzialeksanyan/Desktop/CS_PROJECTS/Java projects/CanvasDrawing/my-drawing-app/client/src/DrawingCanvas.js"],"sourcesContent":["import React, { useRef, useState } from 'react';\n\nconst DrawingCanvas = () => {\n    const canvasRef = useRef();\n    const [drawMode, setDrawMode] = useState(false);\n    const [drawRectMode, setDrawRectMode] = useState(false);\n    const [isDrawing, setIsDrawing] = useState(false);\n    const [isDrawingRect, setIsDrawingRect] = useState(false);\n    const [startRectCoords, setStartRectCoords] = useState({ x: 0, y: 0 });\n    const [drawnObjects, setDrawnObjects] = useState([]);\n\n    const deleteRectangle = (id) => {\n        setDrawnObjects((prevObjects) => {\n            // Find the rectangle with the specified ID\n            const deletedRectangle = prevObjects.find((object) => object.id === id);\n\n            if (deletedRectangle) {\n                // Clear the specific rectangle from the canvas\n                const canvas = canvasRef.current;\n                const ctx = canvas.getContext('2d');\n                ctx.clearRect(deletedRectangle.x1, deletedRectangle.y1, deletedRectangle.x2 - deletedRectangle.x1, deletedRectangle.y2 - deletedRectangle.y1);\n            }\n\n            // Filter out the rectangle with the specified ID from drawnObjects\n            const updatedObjects = prevObjects.filter((object) => object.id !== id);\n            return updatedObjects;\n        });\n    };\n\n    const toggleDrawMode = () => {\n        setDrawMode(!drawMode);\n        setDrawRectMode(false);\n        setIsDrawingRect(false);\n    };\n\n    const toggleDrawRectMode = () => {\n        setDrawRectMode(!drawRectMode);\n        setDrawMode(false);\n        setIsDrawingRect(true);\n    };\n\n    const startDrawing = (e) => {\n        if (!drawMode && !drawRectMode) return;\n        setIsDrawing(true);\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        ctx.beginPath();\n        ctx.moveTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n        if (drawRectMode) {\n            setStartRectCoords({ x: e.clientX - canvas.offsetLeft, y: e.clientY - canvas.offsetTop });\n        }\n    };\n\n    const draw = (e) => {\n        if (!drawMode && !drawRectMode || !isDrawing) return;\n\n         const canvas = canvasRef.current;\n         const ctx = canvas.getContext('2d');\n\n         if (drawRectMode) {\n             drawRectangle(\n                 startRectCoords.x,\n                 startRectCoords.y,\n                 e.clientX - canvas.offsetLeft,\n                 e.clientY - canvas.offsetTop,\n                 ctx,\n                 canvas\n             );\n             return;\n         }else{\n                 ctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n                 ctx.stroke();\n         }\n\n        // Add the drawn line to the array of drawnObjects\n       setDrawnObjects([\n           ...drawnObjects,\n           {\n               type: 'line',  // Indicate that it's a freehand line\n               x1: startRectCoords.x,\n               y1: startRectCoords.y,\n               x2: e.clientX - canvas.offsetLeft,\n               y2: e.clientY - canvas.offsetTop,\n               width: ctx.lineWidth,  // Include the width of the line\n               color: ctx.strokeStyle,  // Include the color of the line\n           },\n       ]);\n\n\n    };\n\n    const stopDrawing = () => {\n        setIsDrawing(false);\n    };\n\n    const drawRectangle = (x1, y1, x2, y2, ctx, canvas) => {\n\n\n        // Delete existing rectangles with the same starting point\n//        const rectanglesToDelete = drawnObjects.filter(\n//            (object) => object.type === 'rectangle' && object.x1 === x1 && object.y1 === y1\n//        );\n\n//        rectanglesToDelete.forEach((rectangle) => {\n//            deleteRectangle(rectangle.id);\n//        });\n\n        // Draw the new rectangle\n        ctx.beginPath();\n        ctx.strokeRect(x1, y1, x2 - x1, y2 - y1);\n        //ctx.stroke();\n\n        // Add the drawn rectangle to the array of drawnObjects\n         const filteredObjects = drawnObjects.filter((object) => {\n                    if (object.type === 'rectangle' &&\n                                ((object.x1 === x1 && object.y1 === y1) ||\n                                (object.x2 === x1 && object.y2 === y1) ||\n                                (object.x1 === x2 && object.y1 === y2) ||\n                                (object.x2 === x2 && object.y2 === y2))){\n                                //ctx.clearRect(object.x1, object.y1, object.x2 - object.x1, object.y2 - object.y1);\n\n                        return false; // Exclude rectangles with the same starting point\n                    }\n                    return true;\n                });\n\n                // Add the drawn rectangle to the array of drawnObjects\n                setDrawnObjects([\n                    ...filteredObjects,\n                    {\n                        type: 'rectangle',\n                        x1,\n                        y1,\n                        x2,\n                        y2,\n                    },\n                ]);\n    };\n\n   return (\n        <div>\n            <h1 style={{ color: 'black' }}>Simple Drawing Canvas</h1>\n            <div\n                className=\"tool\"\n                onClick={toggleDrawMode}\n                style={{\n                    cursor: 'pointer',\n                    userSelect: 'none',\n                    display: 'inline-block',\n                    marginRight: '10px',\n                    fontSize: '24px',\n                    background: drawMode ? 'DarkTurquoise' : 'transparent',\n                }}\n            >\n                <div style={{ color: 'black' }}>✎</div>\n            </div>\n            <div\n                className=\"tool\"\n                onClick={toggleDrawRectMode}\n                style={{\n                    cursor: 'pointer',\n                    userSelect: 'none',\n                    display: 'inline-block',\n                    marginRight: '10px',\n                    fontSize: '24px',\n                    background: drawRectMode ? 'DarkTurquoise' : 'transparent',\n                }}\n            >\n                <div style={{ color: 'black' }}>◻</div>\n            </div>\n            <canvas\n                id=\"myCanvas\"\n                ref={canvasRef}\n                width=\"1000\"\n                height=\"500\"\n                style={{ border: '1px solid #000', cursor: 'crosshair' }}\n                onMouseDown={startDrawing}\n                onMouseMove={draw}\n                onMouseUp={stopDrawing}\n                onMouseLeave={stopDrawing}\n            ></canvas>\n            {/* Display the drawn objects */}\n            <div>\n                <h2>Drawn Objects:</h2>\n                <ul>\n                    {drawnObjects.map((object, index) => (\n                        <li key={index}>{JSON.stringify(object)}</li>\n                    ))}\n                </ul>\n            </div>\n        </div>\n\n     );\n     };\n\nexport default DrawingCanvas;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}