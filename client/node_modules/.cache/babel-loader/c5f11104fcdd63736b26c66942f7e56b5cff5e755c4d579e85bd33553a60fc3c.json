{"ast":null,"code":"var _jsxFileName = \"/Users/syuzialeksanyan/Desktop/CS_PROJECTS/Java projects/CanvasDrawing/my-drawing-app/client/src/App.js\",\n  _s = $RefreshSig$();\n// import React, { useEffect } from 'react';\n// import io from 'socket.io-client';\n// import DrawingCanvas from './DrawingCanvas.js';\n//\n//\n// const socket = io('http://localhost:3000'); // Replace with your server URL\n//\n// function App() {\n//     useEffect(() => {\n//         // Socket event listeners\n//         socket.on('connect', () => {\n//             console.log('Connected to server');\n//         });\n//\n//         socket.on('draw', (data) => {\n//             console.log('Received drawing data:', data);\n//             // Handle drawing data (update canvas, etc.)\n//         });\n//\n//         socket.on('disconnect', () => {\n//             console.log('Disconnected from server');\n//         });\n//\n//         return () => {\n//             // Clean up event listeners on unmount\n//             socket.off('connect');\n//             socket.off('draw');\n//             socket.off('disconnect');\n//         };\n//     }, []); // Empty dependency array ensures this effect runs only once\n//\n//     return (\n//         <div className=\"App\">\n//             <DrawingCanvas socket={socket} />\n//         </div>\n//     );\n// }\n//\n// export default App;\n//\n// Import required modules\nimport React, { useEffect } from 'react';\nimport io from 'socket.io-client';\nimport DrawingCanvas from './DrawingCanvas.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  // Create socket instance\n  const socket = io('http://localhost:3000'); // Verify that this URL matches your server configuration\n\n  // useEffect hook to set up socket event listeners\n  useEffect(() => {\n    console.log('useEffect hook is running'); // Debugging statement to confirm useEffect execution\n\n    // Log the socket instance\n    console.log('Socket instance:', socket);\n\n    // Socket event listeners\n    socket.on('connect', () => {\n      console.log('Connected to server');\n    });\n    socket.on('draw', data => {\n      console.log('Received drawing data:', data);\n      // Handle drawing data (update canvas, etc.)\n    });\n    socket.on('disconnect', () => {\n      console.log('Disconnected from server');\n    });\n\n    // Clean up event listeners on unmount\n    return () => {\n      console.log('Cleaning up event listeners'); // Debugging statement for cleanup\n      socket.off('connect');\n      socket.off('draw');\n      socket.off('disconnect');\n    };\n  }, [dependency1, dependency2]); // Include socket in the dependencies array to ensure proper cleanup\n\n  // Render component\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(DrawingCanvas, {\n      socket: socket\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 9\n  }, this);\n}\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","io","DrawingCanvas","jsxDEV","_jsxDEV","App","_s","socket","console","log","on","data","off","dependency1","dependency2","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/syuzialeksanyan/Desktop/CS_PROJECTS/Java projects/CanvasDrawing/my-drawing-app/client/src/App.js"],"sourcesContent":["// import React, { useEffect } from 'react';\n// import io from 'socket.io-client';\n// import DrawingCanvas from './DrawingCanvas.js';\n//\n//\n// const socket = io('http://localhost:3000'); // Replace with your server URL\n//\n// function App() {\n//     useEffect(() => {\n//         // Socket event listeners\n//         socket.on('connect', () => {\n//             console.log('Connected to server');\n//         });\n//\n//         socket.on('draw', (data) => {\n//             console.log('Received drawing data:', data);\n//             // Handle drawing data (update canvas, etc.)\n//         });\n//\n//         socket.on('disconnect', () => {\n//             console.log('Disconnected from server');\n//         });\n//\n//         return () => {\n//             // Clean up event listeners on unmount\n//             socket.off('connect');\n//             socket.off('draw');\n//             socket.off('disconnect');\n//         };\n//     }, []); // Empty dependency array ensures this effect runs only once\n//\n//     return (\n//         <div className=\"App\">\n//             <DrawingCanvas socket={socket} />\n//         </div>\n//     );\n// }\n//\n// export default App;\n//\n// Import required modules\nimport React, { useEffect } from 'react';\nimport io from 'socket.io-client';\nimport DrawingCanvas from './DrawingCanvas.js';\n\nfunction App() {\n    // Create socket instance\n    const socket = io('http://localhost:3000'); // Verify that this URL matches your server configuration\n\n    // useEffect hook to set up socket event listeners\n    useEffect(() => {\n        console.log('useEffect hook is running'); // Debugging statement to confirm useEffect execution\n\n        // Log the socket instance\n        console.log('Socket instance:', socket);\n\n        // Socket event listeners\n        socket.on('connect', () => {\n            console.log('Connected to server');\n        });\n\n        socket.on('draw', (data) => {\n            console.log('Received drawing data:', data);\n            // Handle drawing data (update canvas, etc.)\n        });\n\n        socket.on('disconnect', () => {\n            console.log('Disconnected from server');\n        });\n\n        // Clean up event listeners on unmount\n        return () => {\n            console.log('Cleaning up event listeners'); // Debugging statement for cleanup\n            socket.off('connect');\n            socket.off('draw');\n            socket.off('disconnect');\n        };\n    }, [dependency1, dependency2]); // Include socket in the dependencies array to ensure proper cleanup\n\n    // Render component\n    return (\n        <div className=\"App\">\n            <DrawingCanvas socket={socket} />\n        </div>\n    );\n}\n\nexport default App;\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,EAAE,MAAM,kBAAkB;AACjC,OAAOC,aAAa,MAAM,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE/C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACX;EACA,MAAMC,MAAM,GAAGN,EAAE,CAAC,uBAAuB,CAAC,CAAC,CAAC;;EAE5C;EACAD,SAAS,CAAC,MAAM;IACZQ,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CAAC,CAAC;;IAE1C;IACAD,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEF,MAAM,CAAC;;IAEvC;IACAA,MAAM,CAACG,EAAE,CAAC,SAAS,EAAE,MAAM;MACvBF,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACtC,CAAC,CAAC;IAEFF,MAAM,CAACG,EAAE,CAAC,MAAM,EAAGC,IAAI,IAAK;MACxBH,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEE,IAAI,CAAC;MAC3C;IACJ,CAAC,CAAC;IAEFJ,MAAM,CAACG,EAAE,CAAC,YAAY,EAAE,MAAM;MAC1BF,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IAC3C,CAAC,CAAC;;IAEF;IACA,OAAO,MAAM;MACTD,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC,CAAC,CAAC;MAC5CF,MAAM,CAACK,GAAG,CAAC,SAAS,CAAC;MACrBL,MAAM,CAACK,GAAG,CAAC,MAAM,CAAC;MAClBL,MAAM,CAACK,GAAG,CAAC,YAAY,CAAC;IAC5B,CAAC;EACL,CAAC,EAAE,CAACC,WAAW,EAAEC,WAAW,CAAC,CAAC,CAAC,CAAC;;EAEhC;EACA,oBACIV,OAAA;IAAKW,SAAS,EAAC,KAAK;IAAAC,QAAA,eAChBZ,OAAA,CAACF,aAAa;MAACK,MAAM,EAAEA;IAAO;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAChC,CAAC;AAEd;AAACd,EAAA,CAxCQD,GAAG;AAAAgB,EAAA,GAAHhB,GAAG;AA0CZ,eAAeA,GAAG;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}